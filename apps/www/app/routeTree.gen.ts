/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WithFooterImport } from './routes/_with-footer'
import { Route as AuthImport } from './routes/_auth'
import { Route as WithFooterWithHeaderImport } from './routes/_with-footer/_with-header'
import { Route as WithFooterWithHeaderIndexImport } from './routes/_with-footer/_with-header/index'
import { Route as WithFooterWithHeaderBibleIndexImport } from './routes/_with-footer/_with-header/bible/index'

// Create/Update Routes

const WithFooterRoute = WithFooterImport.update({
  id: '/_with-footer',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const WithFooterWithHeaderRoute = WithFooterWithHeaderImport.update({
  id: '/_with-header',
  getParentRoute: () => WithFooterRoute,
} as any)

const WithFooterWithHeaderIndexRoute = WithFooterWithHeaderIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WithFooterWithHeaderRoute,
} as any)

const WithFooterWithHeaderBibleIndexRoute =
  WithFooterWithHeaderBibleIndexImport.update({
    id: '/bible/',
    path: '/bible/',
    getParentRoute: () => WithFooterWithHeaderRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_with-footer': {
      id: '/_with-footer'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof WithFooterImport
      parentRoute: typeof rootRoute
    }
    '/_with-footer/_with-header': {
      id: '/_with-footer/_with-header'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof WithFooterWithHeaderImport
      parentRoute: typeof WithFooterImport
    }
    '/_with-footer/_with-header/': {
      id: '/_with-footer/_with-header/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof WithFooterWithHeaderIndexImport
      parentRoute: typeof WithFooterWithHeaderImport
    }
    '/_with-footer/_with-header/bible/': {
      id: '/_with-footer/_with-header/bible/'
      path: '/bible'
      fullPath: '/bible'
      preLoaderRoute: typeof WithFooterWithHeaderBibleIndexImport
      parentRoute: typeof WithFooterWithHeaderImport
    }
  }
}

// Create and export the route tree

interface WithFooterWithHeaderRouteChildren {
  WithFooterWithHeaderIndexRoute: typeof WithFooterWithHeaderIndexRoute
  WithFooterWithHeaderBibleIndexRoute: typeof WithFooterWithHeaderBibleIndexRoute
}

const WithFooterWithHeaderRouteChildren: WithFooterWithHeaderRouteChildren = {
  WithFooterWithHeaderIndexRoute: WithFooterWithHeaderIndexRoute,
  WithFooterWithHeaderBibleIndexRoute: WithFooterWithHeaderBibleIndexRoute,
}

const WithFooterWithHeaderRouteWithChildren =
  WithFooterWithHeaderRoute._addFileChildren(WithFooterWithHeaderRouteChildren)

interface WithFooterRouteChildren {
  WithFooterWithHeaderRoute: typeof WithFooterWithHeaderRouteWithChildren
}

const WithFooterRouteChildren: WithFooterRouteChildren = {
  WithFooterWithHeaderRoute: WithFooterWithHeaderRouteWithChildren,
}

const WithFooterRouteWithChildren = WithFooterRoute._addFileChildren(
  WithFooterRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof WithFooterWithHeaderRouteWithChildren
  '/': typeof WithFooterWithHeaderIndexRoute
  '/bible': typeof WithFooterWithHeaderBibleIndexRoute
}

export interface FileRoutesByTo {
  '': typeof WithFooterRouteWithChildren
  '/': typeof WithFooterWithHeaderIndexRoute
  '/bible': typeof WithFooterWithHeaderBibleIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRoute
  '/_with-footer': typeof WithFooterRouteWithChildren
  '/_with-footer/_with-header': typeof WithFooterWithHeaderRouteWithChildren
  '/_with-footer/_with-header/': typeof WithFooterWithHeaderIndexRoute
  '/_with-footer/_with-header/bible/': typeof WithFooterWithHeaderBibleIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/' | '/bible'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/' | '/bible'
  id:
    | '__root__'
    | '/_auth'
    | '/_with-footer'
    | '/_with-footer/_with-header'
    | '/_with-footer/_with-header/'
    | '/_with-footer/_with-header/bible/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRoute
  WithFooterRoute: typeof WithFooterRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRoute,
  WithFooterRoute: WithFooterRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_with-footer"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx"
    },
    "/_with-footer": {
      "filePath": "_with-footer.tsx",
      "children": [
        "/_with-footer/_with-header"
      ]
    },
    "/_with-footer/_with-header": {
      "filePath": "_with-footer/_with-header.tsx",
      "parent": "/_with-footer",
      "children": [
        "/_with-footer/_with-header/",
        "/_with-footer/_with-header/bible/"
      ]
    },
    "/_with-footer/_with-header/": {
      "filePath": "_with-footer/_with-header/index.tsx",
      "parent": "/_with-footer/_with-header"
    },
    "/_with-footer/_with-header/bible/": {
      "filePath": "_with-footer/_with-header/bible/index.tsx",
      "parent": "/_with-footer/_with-header"
    }
  }
}
ROUTE_MANIFEST_END */
