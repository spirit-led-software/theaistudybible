scalar Date
scalar Metadata

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

directive @cacheControl(
  maxAge: Int
  scope: CacheControlScope
  inheritMaxAge: Boolean
) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION

interface BaseModel {
  id: String!
  createdAt: Date!
  updatedAt: Date!
}

enum Translation {
  NIV
  ESV
  NKJV
  NLT
}

type User implements BaseModel {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  lastSeenAt: Date
  email: String!
  name: String
  stripeCustomerId: String
  image: String
  hasCustomImage: Boolean!
  translation: Translation!
  password: UserPassword
  roles: [Role!] @cacheControl(maxAge: 300, scope: PRIVATE)
  messages(filter: FilterInput, limit: Int, page: Int, sort: [SortInput!]): [UserMessage!]
  aiResponses(filter: FilterInput, limit: Int, page: Int, sort: [SortInput!]): [AiResponse!]
  aiResponseReactions(
    filter: FilterInput
    limit: Int
    page: Int
    sort: [SortInput!]
  ): [AiResponseReaction!]
  chatCount(filter: FilterInput): Int
  chats(filter: FilterInput, limit: Int, page: Int, sort: [SortInput!]): [Chat!]
  generatedImages(
    filter: FilterInput
    limit: Int
    page: Int
    sort: [SortInput!]
  ): [UserGeneratedImage!]
  devotionReactionCount(filter: FilterInput): Int
  devotionReactions(
    filter: FilterInput
    limit: Int
    page: Int
    sort: [SortInput!]
  ): [DevotionReaction!]
}

input CreateUserInput {
  email: String!
  name: String
  image: String
  translation: Translation
}

input UpdateUserInput {
  email: String
  name: String
  image: String
  translation: Translation
}

type UserPassword implements BaseModel {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  passwordHash: String!
  salt: String!
  userId: String!
  user: User
}

type Role implements BaseModel {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  permissions: [String!]!
  users(filter: FilterInput, limit: Int, page: Int, sort: [SortInput!]): [User!]
}

input CreateRoleInput {
  name: String!
  permissions: [String!]!
}

input UpdateRoleInput {
  name: String
  permissions: [String!]
}

type UserMessage implements BaseModel {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  aiId: String
  text: String!
  chatId: String!
  chat: Chat
  userId: String!
  user: User
}

type AiResponse implements BaseModel {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  aiId: String
  text: String
  failed: Boolean!
  regenerated: Boolean!
  modelId: String!
  searchQueries: [String!]!
  userMessageId: String!
  userMessage: UserMessage
  chatId: String!
  chat: Chat
  userId: String!
  user: User
  sourceDocuments: [SourceDocument!]
}

enum AiResponseReactionType {
  LIKE
  DISLIKE
}

type AiResponseReaction implements BaseModel {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  reaction: AiResponseReactionType!
  comment: String
  aiResponseId: String!
  aiResponse: AiResponse
  userId: String!
  user: User
}

input CreateAiResponseReactionInput {
  reaction: AiResponseReactionType!
  comment: String
  aiResponseId: String!
  userId: String
}

input UpdateAiResponseReactionInput {
  reaction: AiResponseReactionType
  comment: String
}

type Chat implements BaseModel {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  customName: Boolean!
  userId: String!
  user: User
  userMessages(filter: FilterInput, limit: Int, page: Int, sort: [SortInput!]): [UserMessage!]
  aiResponses(filter: FilterInput, limit: Int, page: Int, sort: [SortInput!]): [AiResponse!]
  chatMessages(limit: Int, page: Int, sort: [SortInput!]): [ChatMessage!]
}

input CreateChatInput {
  name: String
  userId: String
}

input UpdateChatInput {
  name: String
}

enum ChatMessageRole {
  system
  user
  assistant
  function
  data
  tool
  anonymous
}

type ChatMessage {
  id: String!
  uuid: String
  name: String
  role: ChatMessageRole!
  content: String!
  createdAt: Date
  modelId: String
  searchQueries: [String!]
}

type UserGeneratedImage implements BaseModel {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  url: String
  userPrompt: String!
  prompt: String
  negativePrompt: String
  searchQueries: [String!]!
  failed: Boolean!
  userId: String!
  user: User
  sourceDocuments: [SourceDocument!]
}

type Devotion implements BaseModel {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  topic: String!
  bibleReading: String!
  summary: String!
  reflection: String
  prayer: String
  diveDeeperQueries: [String!]!
  failed: Boolean!
  reactions(filter: FilterInput, limit: Int, page: Int, sort: [SortInput!]): [DevotionReaction!]
  reactionCounts: [DevotionReactionCount!]
  images: [DevotionImage!]
  sourceDocuments: [SourceDocument!]
}

input UpdateDevotionInput {
  topic: String
  bibleReading: String
  summary: String
  reflection: String
  prayer: String
  diveDeeperQueries: [String!]
}

enum DevotionReactionType {
  LIKE
  DISLIKE
}

type DevotionReaction implements BaseModel {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  reaction: DevotionReactionType!
  comment: String
  devotionId: String!
  devotion: Devotion
  userId: String!
  user: User
}

input CreateDevotionReactionInput {
  reaction: DevotionReactionType!
  comment: String
  devotionId: String!
  userId: String
}

input UpdateDevotionReactionInput {
  reaction: DevotionReactionType
  comment: String
}

type DevotionReactionCount {
  type: DevotionReactionType!
  count: Int!
}

type DevotionImage implements BaseModel {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  url: String!
  caption: String
  prompt: String
  negativePrompt: String
  devotionId: String!
  devotion: Devotion
}

input UpdateDevotionImage {
  caption: String
}

enum DataSourceType {
  WEB_CRAWL
  FILE
  WEBPAGE
  REMOTE_FILE
  YOUTUBE
}

enum SyncSchedule {
  DAILY
  WEEKLY
  MONTHLY
  NEVER
}

type DataSource implements BaseModel {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  url: String!
  type: DataSourceType!
  metadata: Metadata!
  numberOfDocuments: Int!
  syncSchedule: SyncSchedule!
  lastManualSync: String
  lastAutomaticSync: String
  indexOperations(filter: FilterInput, limit: Int, page: Int, sort: [SortInput!]): [IndexOperation!]
}

input CreateDataSourceInput {
  name: String!
  url: String!
  type: DataSourceType!
  metadata: Metadata
  syncSchedule: SyncSchedule
}

input UpdateDataSourceInput {
  name: String
  url: String
  type: DataSourceType
  metadata: Metadata
  syncSchedule: SyncSchedule
}

enum IndexOperationStatus {
  FAILED
  SUCCEEDED
  RUNNING
  COMPLETED
}

type IndexOperation implements BaseModel {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  status: IndexOperationStatus!
  errorMessages: [String!]!
  metadata: Metadata!
  dataSourceId: String!
  dataSource: DataSource
}

input UpdateIndexOperationInput {
  status: IndexOperationStatus
  metadata: Metadata
}

enum DistanceMetric {
  cosine
  l2
  innerProduct
}

type SourceDocument {
  id: String!
  embedding: [Float!]
  metadata: Metadata!
  pageContent: String
  distance: Float
  distanceMetric: DistanceMetric
}

enum SortOrder {
  asc
  desc
}

input SortInput {
  field: String!
  order: SortOrder!
}

input ColumnValue {
  column: String!
  value: String!
}

input ColumnPlaceholder {
  column: String!
  placeholder: String!
}

input FilterInput {
  AND: [FilterInput!]
  OR: [FilterInput!]
  NOT: FilterInput
  eq: ColumnValue
  neq: ColumnValue
  gt: ColumnValue
  gte: ColumnValue
  lt: ColumnValue
  lte: ColumnValue
  like: ColumnPlaceholder
  iLike: ColumnPlaceholder
  notLike: ColumnPlaceholder
}

type Query {
  currentUser: User @cacheControl(maxAge: 120, scope: PRIVATE)
  user(id: String!): User @cacheControl(maxAge: 120)
  users(filter: FilterInput, limit: Int, page: Int, sort: [SortInput!]): [User!]!
    @cacheControl(maxAge: 120)
  userCount(filter: FilterInput): Int @cacheControl(maxAge: 120)

  currentUserPassword: UserPassword
  userPassword(id: String!): UserPassword
  userPasswords(filter: FilterInput, limit: Int, page: Int, sort: [SortInput!]): [UserPassword!]!

  role(id: String!): Role @cacheControl(maxAge: 300)
  roles(filter: FilterInput, limit: Int, page: Int, sort: [SortInput!]): [Role!]!
    @cacheControl(maxAge: 300)

  userMessage(id: String!): UserMessage @cacheControl(maxAge: 60, scope: PRIVATE)
  userMessages(filter: FilterInput, limit: Int, page: Int, sort: [SortInput!]): [UserMessage!]!
    @cacheControl(maxAge: 60, scope: PRIVATE)

  aiResponse(id: String!): AiResponse @cacheControl(maxAge: 60, scope: PRIVATE)
  aiResponses(filter: FilterInput, limit: Int, page: Int, sort: [SortInput!]): [AiResponse!]!
    @cacheControl(maxAge: 60, scope: PRIVATE)

  aiResponseReaction(id: String!): AiResponseReaction @cacheControl(maxAge: 60, scope: PRIVATE)
  aiResponseReactions(
    filter: FilterInput
    limit: Int
    page: Int
    sort: [SortInput!]
  ): [AiResponseReaction!]! @cacheControl(maxAge: 60, scope: PRIVATE)

  chat(id: String!): Chat @cacheControl(maxAge: 60, scope: PRIVATE)
  chats(filter: FilterInput, limit: Int, page: Int, sort: [SortInput!]): [Chat!]!
    @cacheControl(maxAge: 60, scope: PRIVATE)
  chatCount(filter: FilterInput): Int @cacheControl(maxAge: 60, scope: PRIVATE)

  chatMessages(chatId: String!, limit: Int, page: Int, sort: [SortInput!]): [ChatMessage!]!
    @cacheControl(maxAge: 60, scope: PRIVATE)

  userGeneratedImage(id: String!): UserGeneratedImage @cacheControl(maxAge: 60, scope: PRIVATE)
  userGeneratedImages(
    filter: FilterInput
    limit: Int
    page: Int
    sort: [SortInput!]
  ): [UserGeneratedImage!]! @cacheControl(maxAge: 60, scope: PRIVATE)

  devotion(id: String!): Devotion @cacheControl(maxAge: 300)
  devotions(filter: FilterInput, limit: Int, page: Int, sort: [SortInput!]): [Devotion!]!
    @cacheControl(maxAge: 300)

  devotionReaction(id: String!): DevotionReaction @cacheControl(maxAge: 60)
  devotionReactions(
    filter: FilterInput
    limit: Int
    page: Int
    sort: [SortInput!]
  ): [DevotionReaction!]! @cacheControl(maxAge: 60)

  devotionImage(id: String!): DevotionImage @cacheControl(maxAge: 300)
  devotionImages(filter: FilterInput, limit: Int, page: Int, sort: [SortInput!]): [DevotionImage!]!
    @cacheControl(maxAge: 300)

  dataSource(id: String!): DataSource @cacheControl(maxAge: 300)
  dataSources(filter: FilterInput, limit: Int, page: Int, sort: [SortInput!]): [DataSource!]!
    @cacheControl(maxAge: 300)

  indexOperation(id: String!): IndexOperation @cacheControl(maxAge: 60, scope: PRIVATE)
  indexOperations(
    filter: FilterInput
    limit: Int
    page: Int
    sort: [SortInput!]
  ): [IndexOperation!]! @cacheControl(maxAge: 60, scope: PRIVATE)
}

type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(id: String!, input: UpdateUserInput!): User
  deleteUser(id: String!): User

  deleteUserPassword(id: String!): UserPassword

  createRole(input: CreateRoleInput!): Role
  updateRole(id: String!, input: UpdateRoleInput!): Role
  deleteRole(id: String!): Role

  deleteUserMessage(id: String!): UserMessage

  deleteUserGeneratedImage(id: String!): UserGeneratedImage

  deleteAiResponse(id: String!): AiResponse

  createAiResponseReaction(input: CreateAiResponseReactionInput!): AiResponseReaction
  updateAiResponseReaction(id: String!, input: UpdateAiResponseReactionInput!): AiResponseReaction
  deleteAiResponseReaction(id: String!): AiResponseReaction

  createChat(input: CreateChatInput!): Chat
  updateChat(id: String!, input: UpdateChatInput!): Chat
  deleteChat(id: String!): Chat

  updateDevotion(id: String!, input: UpdateDevotionInput!): Devotion
  deleteDevotion(id: String!): Devotion

  createDevotionReaction(input: CreateDevotionReactionInput!): DevotionReaction
  updateDevotionReaction(id: String!, input: UpdateDevotionReactionInput!): DevotionReaction
  deleteDevotionReaction(id: String!): DevotionReaction

  updateDevotionImage(id: String!, input: UpdateDevotionImage!): DevotionImage
  deleteDevotionImage(id: String!): DevotionImage

  createDataSource(input: CreateDataSourceInput!): DataSource
  updateDataSource(id: String!, input: UpdateDataSourceInput!): DataSource
  deleteDataSource(id: String!): DataSource

  updateIndexOperation(id: String!, input: UpdateIndexOperationInput!): IndexOperation
  deleteIndexOperation(id: String!): IndexOperation
}
