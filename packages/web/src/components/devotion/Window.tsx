"use client";

import useWindowDimensions from "@hooks/window";
import { Devotion, SourceDocument } from "@revelationsai/core/database/model";
import { DevotionImage } from "@revelationsai/core/database/model/devotion-image";
import Moment from "moment";
import Link from "next/link";
import { useState } from "react";
import { Sidebar } from "./Sidebar";

export function Window({
  devos,
  activeDevo,
  sourceDocuments,
  images,
}: {
  devos: Devotion[];
  activeDevo: Devotion;
  sourceDocuments: SourceDocument[];
  images: DevotionImage[];
}) {
  const windowDimensions = useWindowDimensions();
  const [isSidebarOpen, setIsSidebarOpen] = useState(
    windowDimensions.width! > 1024
  );

  return (
    <>
      <Sidebar
        activeDevoId={activeDevo.id}
        initDevos={devos}
        isOpen={isSidebarOpen}
        setIsOpen={setIsSidebarOpen}
      />
      <div
        className={`fixed flex flex-col h-full overflow-y-scroll lg:visible lg:w-full lg:relative`}
      >
        <div className="px-5 pt-5 pb-20">
          <h1 className="mb-2 text-2xl font-bold text-center lg:text-left">
            {Moment(activeDevo.createdAt).format("MMMM Do YYYY")}
          </h1>
          {activeDevo.bibleReading && (
            <div className="flex flex-col w-full break-words whitespace-pre-wrap">
              <h2 className="mb-2 text-xl font-bold text-center lg:text-left">
                Bible Reading
              </h2>
              <div className="flex flex-col w-full">
                {activeDevo.bibleReading}
              </div>
            </div>
          )}
          {activeDevo.summary && (
            <div className="flex flex-col w-full break-words whitespace-pre-wrap">
              <h2 className="mb-2 text-xl font-bold text-center lg:text-left">
                Summary
              </h2>
              <div className="flex flex-col w-full">{activeDevo.summary}</div>
            </div>
          )}
          {activeDevo.reflection && (
            <div className="flex flex-col w-full break-words whitespace-pre-wrap">
              <h2 className="mb-2 text-xl font-bold text-center lg:text-left">
                Reflection
              </h2>
              <div className="flex flex-col w-full">
                {activeDevo.reflection}
              </div>
            </div>
          )}
          {activeDevo.prayer && (
            <div className="flex flex-col w-full break-words whitespace-pre-wrap">
              <h2 className="mb-2 text-xl font-bold text-center lg:text-left">
                Summary
              </h2>
              <div className="flex flex-col w-full">{activeDevo.prayer}</div>
            </div>
          )}
          {images && images.length > 0 && (
            <div className="flex flex-col w-full">
              <h2 className="mt-10 mb-2 font-bold">Generated Image(s)</h2>
              {images.map((image) => (
                <div
                  key={image.id}
                  className="flex flex-col w-full lg:flex-row lg:space-x-5"
                >
                  {image.caption && (
                    <p className="text-sm text-center lg:text-left">
                      {image.caption}
                    </p>
                  )}
                  <img
                    src={image.url}
                    alt="devotion image"
                    width={512}
                    height={512}
                    className="mx-auto mb-2 rounded-lg shadow-md lg:float-right lg:ml-5"
                  />
                  <p className="text-xs text-center lg:text-left">
                    This image was generated by AI from the devotion text.
                  </p>
                </div>
              ))}
            </div>
          )}
          {sourceDocuments.length > 0 && (
            <div className="flex flex-col w-full">
              <h2 className="mt-10 mb-2 font-bold">Sources</h2>
              <ul className="flex flex-col space-y-2 text-xs list-decimal list-inside text-slate-400">
                {sourceDocuments
                  .filter((sourceDoc: SourceDocument, index: number) => {
                    const firstIndex = sourceDocuments.findIndex(
                      (otherSourceDoc: SourceDocument) =>
                        (sourceDoc.metadata as any).name ===
                        (otherSourceDoc.metadata as any).name
                    );
                    return firstIndex === index;
                  })
                  ?.map((sourceDoc: SourceDocument) => (
                    <li key={sourceDoc.id}>
                      <Link
                        href={(sourceDoc.metadata as any).url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="hover:text-slate-500 hover:underline"
                      >
                        {(sourceDoc.metadata as any).name}
                      </Link>
                    </li>
                  ))}
              </ul>
            </div>
          )}
        </div>
      </div>
    </>
  );
}
