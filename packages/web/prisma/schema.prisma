generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chat {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  userMessages UserMessage[]
  aiResponses  AiResponse[]

  @@index([name])
}

model UserMessage {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  aiId        String?
  text        String
  chat        Chat         @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId      String
  aiResponses AiResponse[]

  @@index([aiId, text])
}

model AiResponse {
  id              String                         @id @default(uuid())
  createdAt       DateTime                       @default(now())
  updatedAt       DateTime                       @updatedAt
  text            String
  failed          Boolean                        @default(false)
  regenerated     Boolean                        @default(false)
  sourceDocuments AiResponsesOnSourceDocuments[]
  userMessage     UserMessage?                   @relation(fields: [userMessageId], references: [id], onDelete: Cascade)
  userMessageId   String?
  chat            Chat?                          @relation(fields: [chatId], references: [id])
  chatId          String?
}

model SourceDocument {
  id          String                         @id @default(uuid())
  createdAt   DateTime                       @default(now())
  updatedAt   DateTime                       @updatedAt
  text        String                         @unique
  metadata    Json                           @default("{}")
  devotions   DevotionsOnSourceDocuments[]
  aiResponses AiResponsesOnSourceDocuments[]

  @@index([text, metadata])
}

model AiResponsesOnSourceDocuments {
  aiResponse       AiResponse     @relation(fields: [aiResponseId], references: [id], onDelete: Cascade)
  aiResponseId     String
  sourceDocument   SourceDocument @relation(fields: [sourceDocumentId], references: [id], onDelete: Cascade)
  sourceDocumentId String

  @@id([aiResponseId, sourceDocumentId])
}

model Devotion {
  id              String                       @id @default(uuid())
  createdAt       DateTime                     @default(now())
  updatedAt       DateTime                     @updatedAt
  subject         String
  content         String
  sourceDocuments DevotionsOnSourceDocuments[]
}

model DevotionsOnSourceDocuments {
  devotion         Devotion       @relation(fields: [devotionId], references: [id], onDelete: Cascade)
  devotionId       String
  sourceDocument   SourceDocument @relation(fields: [sourceDocumentId], references: [id], onDelete: Cascade)
  sourceDocumentId String

  @@id([devotionId, sourceDocumentId])
}

model IndexOperation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String
  status    String
  metadata  Json

  @@index([type, status])
}
