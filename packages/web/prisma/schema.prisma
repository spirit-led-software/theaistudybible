// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chat {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  name      String
  messages  ChatMessage[]

  @@index([name])
}

model ChatMessage {
  id              String                          @id @default(uuid())
  createdAt       DateTime                        @default(now())
  updatedAt       DateTime                        @updatedAt
  type            ChatMessageType
  text            String
  chat            Chat                            @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId          String
  sourceDocuments ChatMessagesOnSourceDocuments[]
}

enum ChatMessageType {
  user
  bot
}

model SourceDocument {
  id        String                          @id @default(uuid())
  createdAt DateTime                        @default(now())
  updatedAt DateTime                        @updatedAt
  text      String                          @unique
  metadata  Json
  messages  ChatMessagesOnSourceDocuments[]
  devos     DevosOnSourceDocuments[]

  @@index([text, metadata])
}

model ChatMessagesOnSourceDocuments {
  message          ChatMessage    @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId        String
  sourceDocument   SourceDocument @relation(fields: [sourceDocumentId], references: [id], onDelete: Cascade)
  sourceDocumentId String

  @@id([messageId, sourceDocumentId])
}

model Devo {
  id              String                   @id @default(uuid())
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  subject         String
  content         String
  sourceDocuments DevosOnSourceDocuments[]
}

model DevosOnSourceDocuments {
  devo             Devo           @relation(fields: [devoId], references: [id], onDelete: Cascade)
  devoId           String
  sourceDocument   SourceDocument @relation(fields: [sourceDocumentId], references: [id], onDelete: Cascade)
  sourceDocumentId String

  @@id([devoId, sourceDocumentId])
}

model IndexOperation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String
  status    String
  metadata  Json

  @@index([type, status])
}
